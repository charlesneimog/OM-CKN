
(:patch
 (:name "use-py-inside-om")
 (:doc "")
 (:info
  (:created "2021/10/28 20:30:02")
  (:modified "2021/10/29 9:58:19")
  (:by "om-sharp")
  (:version 1.04))
 (:window (:size (1848 866)) (:position (15 33)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :abstraction)
   (:reference
    (:object
     (:class ompyfunctioninternal)
     (:slots
      ((:name "    py    ")
       (:protected-p nil)
       (:icon :py-f)
       (:text
        (:list
         ";;; edit a valid python code,"
         ";;; changing the variables you want to use "
         ";;; inside om-sharp to {til}d."
         "(lambda () (format nil                \""
         ""
         "#All the results that you want to bring to OM need to be printed."
         ""
         "print(2 + 2)"
         ""
         "my_string = 'This is a example of python.'"
         ""
         "print(my_string)"
         ""
         ""
         " \"              ))"))))))
   (:group-id nil)
   (:name "    py    ")
   (:x 62)
   (:y 54)
   (:w 120)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference run-py)
   (:group-id nil)
   (:name "run-py")
   (:x 78)
   (:y 172)
   (:w 87)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 1))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference bring-to-om)
   (:group-id nil)
   (:name "bring-to-om")
   (:x 58)
   (:y 124)
   (:w 129)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:type :abstraction)
   (:reference
    (:object
     (:class ompyfunctioninternal)
     (:slots
      ((:name "    py    ")
       (:protected-p nil)
       (:icon :py-f)
       (:text
        (:list
         ";;; edit a valid python code,"
         ";;; changing the variables you want to use "
         ";;; inside om-sharp to {til}d."
         "(lambda (x y z) (format nil                \""
         ""
         "#All the results that you want to bring to OM need to be printed."
         ""
         "print(~d) #the value of x"
         "print(~d) #the value of y"
         "print(~d) #the value of z"
         ""
         ""
         " \"       x y z))"))))))
   (:group-id nil)
   (:name "    py    ")
   (:x 300)
   (:y 55)
   (:w 158)
   (:h 82)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda :lambda)
   (:reactive nil)
   (:inputs
    (:input (:type :standard) (:name "X") (:value nil) (:reactive nil))
    (:input (:type :standard) (:name "Y") (:value nil) (:reactive nil))
    (:input
     (:type :standard)
     (:name "Z")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 3))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference run-py)
   (:group-id nil)
   (:name "run-py")
   (:x 501)
   (:y 227)
   (:w 87)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference bring-to-om)
   (:group-id nil)
   (:name "bring-to-om")
   (:x 481)
   (:y 191)
   (:w 129)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 466)
   (:y 53)
   (:w 145)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "(1 + 2)"))
   (:id 6))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 613)
   (:y 51)
   (:w 143)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "(19 + 2)"))
   (:id 7))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 760)
   (:y 51)
   (:w 143)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "(19 + 22)"))
   (:id 8))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py-add-var)
   (:group-id nil)
   (:name "py-add-var")
   (:x 411)
   (:y 150)
   (:w 278)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:comment
   (:x 615)
   (:y 195)
   (:w 312)
   (:h 28)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "This object bring the result to OM.")
   (:id 10))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 237)
   (:y 465)
   (:w 152)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "import math")
   (:id 11))
  (:box
   (:type :abstraction)
   (:reference
    (:object
     (:class ompyfunctioninternal)
     (:slots
      ((:name "    py    ")
       (:protected-p nil)
       (:icon :py-f)
       (:text
        (:list
         ""
         "(lambda (x y) "
         "(format nil "
         "\""
         "print(math.atan2(~d,~d)/math.pi*180)"
         "\""
         "x y))"))))))
   (:group-id nil)
   (:name "    py    ")
   (:x 35)
   (:y 345)
   (:w 120)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input (:type :standard) (:name "X") (:value nil) (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py-add-var)
   (:group-id nil)
   (:name "py-add-var")
   (:x 88)
   (:y 425)
   (:w 170)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference run-py)
   (:group-id nil)
   (:name "run-py")
   (:x 174)
   (:y 525)
   (:w 126)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "cabecario")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference bring-to-om)
   (:group-id nil)
   (:name "bring-to-om")
   (:x 104)
   (:y 465)
   (:w 129)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 15))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "my-patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (423 468)) (:position (224 224)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output 1") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "output 1")
       (:x 123)
       (:y 326)
       (:w 88)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output 2") (:index 2) (:doc "")))
       (:group-id nil)
       (:name "output 2")
       (:x 158)
       (:y 326)
       (:w 88)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 260)
       (:y 201)
       (:w 51)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :left)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 2))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 118)
       (:y 200)
       (:w 84)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 3))
      (:box
       (:type :abstraction)
       (:reference
        (:patch
         (:name "my-patch")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (500 500)) (:position (256 256)))
         (:grid nil)
         (:lock nil)
         (:boxes
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 1) (:name "input 1") (:doc "")))
           (:group-id nil)
           (:name "input 1")
           (:x 76)
           (:y 49)
           (:w 80)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 0))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "x") (:index 1) (:doc "")))
           (:group-id nil)
           (:name "x")
           (:x 119)
           (:y 635)
           (:w 47)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 1))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 2) (:name "input 2") (:doc "")))
           (:group-id nil)
           (:name "input 2")
           (:x 308)
           (:y 50)
           (:w 80)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 2))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "y") (:index 2) (:doc "")))
           (:group-id nil)
           (:name "y")
           (:x 431)
           (:y 697)
           (:w 47)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 3))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 3) (:name "input 3") (:doc "")))
           (:group-id nil)
           (:name "input 3")
           (:x 382)
           (:y 44)
           (:w 80)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 4))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "z") (:index 3) (:doc "")))
           (:group-id nil)
           (:name "z")
           (:x 719)
           (:y 617)
           (:w 47)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 5))
          (:box
           (:library "OM-CKN")
           (:type :function)
           (:reference complex-numbers-parts)
           (:group-id nil)
           (:name "complex-numbers-parts")
           (:x 289)
           (:y 279)
           (:w 211)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock :eval-once)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "LIST")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output (:name "out0") (:reactive nil))
            (:output (:name "out1") (:reactive nil)))
           (:id 6))
          (:box
           (:type :function)
           (:reference reduce)
           (:group-id nil)
           (:name "reduce")
           (:x 134)
           (:y 230)
           (:w 87)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FUNCTION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SEQUENCE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 7))
          (:box
           (:type :function)
           (:reference mapcar)
           (:group-id nil)
           (:name "mapcar")
           (:x 115)
           (:y 190)
           (:w 157)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FUNCTION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "LIST")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 8))
          (:box
           (:type :function)
           (:reference om+)
           (:group-id nil)
           (:name "om+")
           (:x 50)
           (:y 189)
           (:w 63)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda :lambda)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "ARG1")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "ARG2")
             (:value 0)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 9))
          (:box
           (:type :function)
           (:reference om*)
           (:group-id nil)
           (:name "om*")
           (:x 321)
           (:y 116)
           (:w 63)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "ARG1")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "ARG2")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 10))
          (:box
           (:library "OM-CKN")
           (:type :function)
           (:reference complex-senoide)
           (:group-id nil)
           (:name "complex-senoide")
           (:x 73)
           (:y 136)
           (:w 162)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda :lambda)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FREQ")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SEC")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SAMPLES-RATE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 11))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 175)
           (:y 101)
           (:w 59)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 44100)
           (:id 12))
          (:box
           (:type :abstraction)
           (:reference
            (:textfun
             (:name "z")
             (:doc "")
             (:info
              (:created nil)
              (:modified nil)
              (:by *app-name*)
              (:version 0))
             (:window (:size nil) (:position nil))
             (:text
              (:list
               ";;; Edit a valid LAMBDA EXPRESSION"
               ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
               "(lambda (x y elevation) "
               "(loop for x-loop in x "
               "      for y-loop in y "
               "      collect (sqrt (abs (+ (om^ x-loop elevation) (om^ y-loop elevation))))))"))))
           (:group-id nil)
           (:name "z")
           (:x 537)
           (:y 393)
           (:w 170)
           (:h 60)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:pre-delay 0)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "X")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "Y")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "ELEVATION")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 13))
          (:box
           (:type :function)
           (:reference om-scale)
           (:group-id nil)
           (:name "om-scale")
           (:x 911)
           (:y 427)
           (:w 283)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SELF")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MINOUT")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MAXOUT")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 14))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 1031)
           (:y 392)
           (:w 34)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value -1)
           (:id 15))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 1119)
           (:y 392)
           (:w 32)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 1)
           (:id 16))
          (:box
           (:type :function)
           (:reference om-scale)
           (:group-id nil)
           (:name "om-scale")
           (:x 68)
           (:y 482)
           (:w 283)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SELF")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MINOUT")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MAXOUT")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 17))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 188)
           (:y 447)
           (:w 34)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value -1)
           (:id 18))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 276)
           (:y 447)
           (:w 32)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 1)
           (:id 19))
          (:box
           (:type :function)
           (:reference om-scale)
           (:group-id nil)
           (:name "om-scale")
           (:x 352)
           (:y 555)
           (:w 283)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SELF")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MINOUT")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MAXOUT")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 20))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 472)
           (:y 520)
           (:w 34)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value -1)
           (:id 21))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 560)
           (:y 520)
           (:w 32)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 1)
           (:id 22))
          (:box
           (:type :function)
           (:reference om-random)
           (:group-id nil)
           (:name "om-random")
           (:x 842)
           (:y 173)
           (:w 112)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "LOW")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "HIGH")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 23))
          (:box
           (:type :value)
           (:reference single-float)
           (:group-id nil)
           (:name "value box")
           (:x 843)
           (:y 106)
           (:w 43)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 0.1)
           (:id 24))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 928)
           (:y 121)
           (:w 32)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 4)
           (:id 25)))
         (:connections
          (:connection
           (:from (:box 0 :out 0))
           (:to (:box 11 :in 1))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             :curved
             :modif
             nil)))
          (:connection
           (:from (:box 2 :out 0))
           (:to (:box 10 :in 0))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             :curved
             :modif
             nil)))
          (:connection
           (:from (:box 4 :out 0))
           (:to (:box 10 :in 1))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             :curved
             :modif
             nil)))
          (:connection (:from (:box 6 :out 0)) (:to (:box 13 :in 0)))
          (:connection (:from (:box 6 :out 0)) (:to (:box 17 :in 0)))
          (:connection
           (:from (:box 6 :out 1))
           (:to (:box 13 :in 1))
           (:attributes (:color nil :style nil :modif (0 -29/94))))
          (:connection (:from (:box 6 :out 1)) (:to (:box 20 :in 0)))
          (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 0)))
          (:connection (:from (:box 8 :out 0)) (:to (:box 7 :in 1)))
          (:connection (:from (:box 9 :out 0)) (:to (:box 7 :in 0)))
          (:connection (:from (:box 10 :out 0)) (:to (:box 8 :in 1)))
          (:connection (:from (:box 11 :out 0)) (:to (:box 8 :in 0)))
          (:connection (:from (:box 12 :out 0)) (:to (:box 11 :in 2)))
          (:connection (:from (:box 13 :out 0)) (:to (:box 14 :in 0)))
          (:connection (:from (:box 14 :out 0)) (:to (:box 5 :in 0)))
          (:connection (:from (:box 15 :out 0)) (:to (:box 14 :in 1)))
          (:connection (:from (:box 16 :out 0)) (:to (:box 14 :in 2)))
          (:connection (:from (:box 17 :out 0)) (:to (:box 1 :in 0)))
          (:connection (:from (:box 18 :out 0)) (:to (:box 17 :in 1)))
          (:connection (:from (:box 19 :out 0)) (:to (:box 17 :in 2)))
          (:connection (:from (:box 20 :out 0)) (:to (:box 3 :in 0)))
          (:connection (:from (:box 21 :out 0)) (:to (:box 20 :in 1)))
          (:connection (:from (:box 22 :out 0)) (:to (:box 20 :in 2)))
          (:connection (:from (:box 23 :out 0)) (:to (:box 13 :in 2)))
          (:connection (:from (:box 24 :out 0)) (:to (:box 23 :in 0)))
          (:connection
           (:from (:box 25 :out 0))
           (:to (:box 23 :in 1))))))
       (:group-id nil)
       (:name "my-patch")
       (:x 123)
       (:y 241)
       (:w 200)
       (:h 60)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:pre-delay 0)
       (:lock :eval-once)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "input 1")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "input 2")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "input 3")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "x") (:reactive nil))
        (:output (:name "y") (:reactive nil))
        (:output (:name "z") (:reactive nil)))
       (:id 4))
      (:box
       (:type :function)
       (:reference prime-ser)
       (:group-id nil)
       (:name "prime-ser")
       (:x 50)
       (:y 85)
       (:w 204)
       (:h 34)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "MAX")
         (:value 100)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "numelem")
         (:value 10)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 176)
       (:y 50)
       (:w 34)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 10)
       (:id 6))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 79)
       (:y 50)
       (:w 43)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 100)
       (:id 7))
      (:box
       (:library "OM-CKN")
       (:type :function)
       (:reference nth-repeated-random)
       (:group-id nil)
       (:name "nth-repeated-random")
       (:x 127)
       (:y 159)
       (:w 195)
       (:h 34)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "TIMES")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 249)
       (:y 124)
       (:w 43)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 10)
       (:id 9)))
     (:connections
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 4 :in 2))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 4 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 0 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection
       (:from (:box 4 :out 1))
       (:to (:box 1 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 8 :in 0)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 5 :in 1)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 5 :in 0)))
      (:connection
       (:from (:box 8 :out 0))
       (:to (:box 4 :in 1))
       (:attributes (:color nil :style nil :modif (0 -23/84))))
      (:connection (:from (:box 9 :out 0)) (:to (:box 8 :in 1))))))
   (:group-id nil)
   (:name "my-patch")
   (:x 192)
   (:y 307)
   (:w 200)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock :locked)
   (:lambda nil)
   (:reactive nil)
   (:inputs)
   (:outputs
    (:output (:name "output 1") (:reactive nil))
    (:output (:name "output 2") (:reactive nil)))
   (:id 16))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py->lisp)
   (:group-id nil)
   (:name "py->lisp")
   (:x 180)
   (:y 574)
   (:w 104)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RESULT")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 17))
  (:comment
   (:x 391)
   (:y 466)
   (:w 312)
   (:h 28)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Here I have the cabecario of the code.")
   (:id 18))
  (:box
   (:type :abstraction)
   (:reference
    (:object
     (:class ompyfunctioninternal)
     (:slots
      ((:name "    py    ")
       (:protected-p nil)
       (:icon :py-f)
       (:text
        (:list
         ""
         "(lambda (x y z) "
         "(format nil "
         "\""
         "import numpy as np"
         "import sys"
         "from vispy import app, visuals, scene"
         ""
         "# build visuals"
         "Plot3D = scene.visuals.create_visual_node(visuals.LinePlotVisual)"
         ""
         "# build canvas"
         "canvas = scene.SceneCanvas(keys='interactive', title='OM-CKN 3dc plot', show=True, bgcolor='white')"
         ""
         "# Add a ViewBox to let the user zoom/rotate"
         "view = canvas.central_widget.add_view()"
         "view.camera = 'turntable'"
         "view.camera.fov = 45"
         "view.camera.distance = 12"
         ""
         ""
         "# prepare data"
         "x = ~d"
         "y = ~d"
         "z = ~d"
         "# plot"
         "pos = np.c_[x, y, z]"
         "Plot3D(pos, width=2.0, color='b',"
         "       edge_color='b', face_color=(0.2, 0.2, 1, 0.8),"
         "       parent=view.scene)"
         ""
         ""
         "\""
         "x y z))"))))))
   (:group-id nil)
   (:name "    py    ")
   (:x 662)
   (:y 370)
   (:w 120)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda :lambda)
   (:reactive nil)
   (:inputs
    (:input (:type :standard) (:name "X") (:value nil) (:reactive nil))
    (:input (:type :standard) (:name "Y") (:value nil) (:reactive nil))
    (:input
     (:type :standard)
     (:name "Z")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 19))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py-add-var)
   (:group-id nil)
   (:name "py-add-var")
   (:x 738)
   (:y 479)
   (:w 205)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 20))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference run-py)
   (:group-id nil)
   (:name "run-py")
   (:x 773)
   (:y 514)
   (:w 126)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 21))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "my-patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (500 500)) (:position (32 32)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output 1") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "output 1")
       (:x 123)
       (:y 326)
       (:w 88)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output 2") (:index 2) (:doc "")))
       (:group-id nil)
       (:name "output 2")
       (:x 158)
       (:y 326)
       (:w 88)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 3) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 352)
       (:y 347)
       (:w 47)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 2))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 260)
       (:y 201)
       (:w 51)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :left)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 3))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 118)
       (:y 200)
       (:w 84)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 4))
      (:box
       (:type :abstraction)
       (:reference
        (:patch
         (:name "my-patch")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1371 789)) (:position (64 64)))
         (:grid nil)
         (:lock nil)
         (:boxes
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 1) (:name "input 1") (:doc "")))
           (:group-id nil)
           (:name "input 1")
           (:x 76)
           (:y 49)
           (:w 80)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 0))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "x") (:index 1) (:doc "")))
           (:group-id nil)
           (:name "x")
           (:x 119)
           (:y 635)
           (:w 47)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 1))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 2) (:name "input 2") (:doc "")))
           (:group-id nil)
           (:name "input 2")
           (:x 308)
           (:y 50)
           (:w 80)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 2))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "y") (:index 2) (:doc "")))
           (:group-id nil)
           (:name "y")
           (:x 431)
           (:y 697)
           (:w 47)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 3))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 3) (:name "input 3") (:doc "")))
           (:group-id nil)
           (:name "input 3")
           (:x 382)
           (:y 44)
           (:w 80)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 4))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "z") (:index 3) (:doc "")))
           (:group-id nil)
           (:name "z")
           (:x 719)
           (:y 617)
           (:w 47)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 5))
          (:box
           (:library "OM-CKN")
           (:type :function)
           (:reference complex-numbers-parts)
           (:group-id nil)
           (:name "complex-numbers-parts")
           (:x 289)
           (:y 279)
           (:w 211)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock :eval-once)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "LIST")
             (:value nil)
             (:reactive nil)))
           (:outputs
            (:output (:name "out0") (:reactive nil))
            (:output (:name "out1") (:reactive nil)))
           (:id 6))
          (:box
           (:type :function)
           (:reference reduce)
           (:group-id nil)
           (:name "reduce")
           (:x 134)
           (:y 230)
           (:w 87)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FUNCTION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SEQUENCE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 7))
          (:box
           (:type :function)
           (:reference mapcar)
           (:group-id nil)
           (:name "mapcar")
           (:x 115)
           (:y 190)
           (:w 157)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FUNCTION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "LIST")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 8))
          (:box
           (:type :function)
           (:reference om+)
           (:group-id nil)
           (:name "om+")
           (:x 50)
           (:y 189)
           (:w 63)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda :lambda)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "ARG1")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "ARG2")
             (:value 0)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 9))
          (:box
           (:type :function)
           (:reference om*)
           (:group-id nil)
           (:name "om*")
           (:x 321)
           (:y 116)
           (:w 63)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "ARG1")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "ARG2")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 10))
          (:box
           (:library "OM-CKN")
           (:type :function)
           (:reference complex-senoide)
           (:group-id nil)
           (:name "complex-senoide")
           (:x 73)
           (:y 136)
           (:w 162)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda :lambda)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FREQ")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SEC")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SAMPLES-RATE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 11))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 175)
           (:y 101)
           (:w 59)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 44100)
           (:id 12))
          (:box
           (:type :abstraction)
           (:reference
            (:textfun
             (:name "z")
             (:doc "")
             (:info
              (:created nil)
              (:modified nil)
              (:by *app-name*)
              (:version 0))
             (:window (:size nil) (:position nil))
             (:text
              (:list
               ";;; Edit a valid LAMBDA EXPRESSION"
               ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
               "(lambda (x y elevation) "
               "(loop for x-loop in x "
               "      for y-loop in y "
               "      collect (sqrt (abs (+ (om^ x-loop elevation) (om^ y-loop elevation))))))"))))
           (:group-id nil)
           (:name "z")
           (:x 537)
           (:y 393)
           (:w 170)
           (:h 60)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:pre-delay 0)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "X")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "Y")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "ELEVATION")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 13))
          (:box
           (:type :function)
           (:reference om-scale)
           (:group-id nil)
           (:name "om-scale")
           (:x 911)
           (:y 427)
           (:w 283)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SELF")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MINOUT")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MAXOUT")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 14))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 1031)
           (:y 392)
           (:w 43)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 1)
           (:id 15))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 1119)
           (:y 392)
           (:w 34)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 12)
           (:id 16))
          (:box
           (:type :function)
           (:reference om-scale)
           (:group-id nil)
           (:name "om-scale")
           (:x 68)
           (:y 482)
           (:w 283)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SELF")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MINOUT")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MAXOUT")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 17))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 188)
           (:y 447)
           (:w 43)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 1)
           (:id 18))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 276)
           (:y 447)
           (:w 34)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 12)
           (:id 19))
          (:box
           (:type :function)
           (:reference om-scale)
           (:group-id nil)
           (:name "om-scale")
           (:x 352)
           (:y 555)
           (:w 283)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SELF")
             (:value 1)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MINOUT")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MAXOUT")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 20))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 472)
           (:y 520)
           (:w 43)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 1)
           (:id 21))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 560)
           (:y 520)
           (:w 34)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 12)
           (:id 22))
          (:box
           (:type :function)
           (:reference om-random)
           (:group-id nil)
           (:name "om-random")
           (:x 842)
           (:y 173)
           (:w 112)
           (:h 34)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:reactive nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "LOW")
             (:value 0)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "HIGH")
             (:value 1)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 23))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 843)
           (:y 106)
           (:w 43)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 1)
           (:id 24))
          (:box
           (:type :value)
           (:reference fixnum)
           (:group-id nil)
           (:name "value box")
           (:x 928)
           (:y 121)
           (:w 34)
           (:h 34)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:reactive nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 10)
           (:id 25)))
         (:connections
          (:connection
           (:from (:box 0 :out 0))
           (:to (:box 11 :in 1))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             :curved
             :modif
             nil)))
          (:connection
           (:from (:box 2 :out 0))
           (:to (:box 10 :in 0))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             :curved
             :modif
             nil)))
          (:connection
           (:from (:box 4 :out 0))
           (:to (:box 10 :in 1))
           (:attributes
            (:color
             (:color 0.2 0.4 0.5 1.0)
             :style
             :curved
             :modif
             nil)))
          (:connection (:from (:box 6 :out 0)) (:to (:box 13 :in 0)))
          (:connection (:from (:box 6 :out 0)) (:to (:box 17 :in 0)))
          (:connection
           (:from (:box 6 :out 1))
           (:to (:box 13 :in 1))
           (:attributes (:color nil :style nil :modif (0 -29/94))))
          (:connection (:from (:box 6 :out 1)) (:to (:box 20 :in 0)))
          (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 0)))
          (:connection (:from (:box 8 :out 0)) (:to (:box 7 :in 1)))
          (:connection (:from (:box 9 :out 0)) (:to (:box 7 :in 0)))
          (:connection (:from (:box 10 :out 0)) (:to (:box 8 :in 1)))
          (:connection (:from (:box 11 :out 0)) (:to (:box 8 :in 0)))
          (:connection (:from (:box 12 :out 0)) (:to (:box 11 :in 2)))
          (:connection (:from (:box 13 :out 0)) (:to (:box 14 :in 0)))
          (:connection (:from (:box 14 :out 0)) (:to (:box 5 :in 0)))
          (:connection (:from (:box 15 :out 0)) (:to (:box 14 :in 1)))
          (:connection (:from (:box 16 :out 0)) (:to (:box 14 :in 2)))
          (:connection (:from (:box 17 :out 0)) (:to (:box 1 :in 0)))
          (:connection (:from (:box 18 :out 0)) (:to (:box 17 :in 1)))
          (:connection (:from (:box 19 :out 0)) (:to (:box 17 :in 2)))
          (:connection (:from (:box 20 :out 0)) (:to (:box 3 :in 0)))
          (:connection (:from (:box 21 :out 0)) (:to (:box 20 :in 1)))
          (:connection (:from (:box 22 :out 0)) (:to (:box 20 :in 2)))
          (:connection (:from (:box 23 :out 0)) (:to (:box 13 :in 2)))
          (:connection (:from (:box 24 :out 0)) (:to (:box 23 :in 0)))
          (:connection
           (:from (:box 25 :out 0))
           (:to (:box 23 :in 1))))))
       (:group-id nil)
       (:name "my-patch")
       (:x 123)
       (:y 241)
       (:w 200)
       (:h 60)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:pre-delay 0)
       (:lock :eval-once)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "input 1")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "input 2")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "input 3")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "x") (:reactive nil))
        (:output (:name "y") (:reactive nil))
        (:output (:name "z") (:reactive nil)))
       (:id 5))
      (:box
       (:type :function)
       (:reference prime-ser)
       (:group-id nil)
       (:name "prime-ser")
       (:x 50)
       (:y 85)
       (:w 204)
       (:h 34)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "MAX")
         (:value 100)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "numelem")
         (:value 10)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 176)
       (:y 50)
       (:w 34)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 10)
       (:id 7))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 79)
       (:y 50)
       (:w 43)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 100)
       (:id 8))
      (:box
       (:library "OM-CKN")
       (:type :function)
       (:reference nth-repeated-random)
       (:group-id nil)
       (:name "nth-repeated-random")
       (:x 127)
       (:y 159)
       (:w 195)
       (:h 34)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "TIMES")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 249)
       (:y 124)
       (:w 43)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 10)
       (:id 10))
      (:box
       (:type :function)
       (:reference arithm-ser)
       (:group-id nil)
       (:name "arithm-ser")
       (:x 286)
       (:y 62)
       (:w 120)
       (:h 34)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "BEGIN")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "END")
         (:value 10)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "STEP")
         (:value 1)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 11))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 292)
       (:y 27)
       (:w 32)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 12))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 324)
       (:y 27)
       (:w 43)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 100)
       (:id 13))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 358)
       (:y 27)
       (:w 32)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 14)))
     (:connections
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 5 :in 2))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 5 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 0 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection
       (:from (:box 5 :out 1))
       (:to (:box 1 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 5 :out 2)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 1)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 6 :in 0)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 5 :in 1))
       (:attributes (:color nil :style nil :modif (0 -23/84))))
      (:connection (:from (:box 10 :out 0)) (:to (:box 9 :in 1)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 9 :in 0)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 11 :in 0)))
      (:connection (:from (:box 13 :out 0)) (:to (:box 11 :in 1)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 11 :in 2))))))
   (:group-id nil)
   (:name "my-patch")
   (:x 1026)
   (:y 224)
   (:w 200)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs)
   (:outputs
    (:output (:name "output 1") (:reactive nil))
    (:output (:name "output 2") (:reactive nil))
    (:output (:name "out") (:reactive nil)))
   (:id 22))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py-list)
   (:group-id nil)
   (:name "py-list")
   (:x 987)
   (:y 403)
   (:w 96)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RESULT")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 23))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py-list)
   (:group-id nil)
   (:name "py-list")
   (:x 885)
   (:y 399)
   (:w 96)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RESULT")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 24))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py-list)
   (:group-id nil)
   (:name "py-list")
   (:x 783)
   (:y 399)
   (:w 96)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RESULT")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 25))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference bpf-python)
   (:group-id nil)
   (:name "bpf-python")
   (:x 1282)
   (:y 399)
   (:w 191)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input (:type :standard) (:name "X") (:value nil) (:reactive nil))
    (:input (:type :standard) (:name "Y") (:value nil) (:reactive nil))
    (:input
     (:type :optional)
     (:name "thickness")
     (:value 0.2)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "color")
     (:value black)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 26))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 1372)
   (:y 323)
   (:w 43)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 27))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "value box")
   (:x 1407)
   (:y 364)
   (:w 59)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value black)
   (:id 28))
  (:box
   (:type :function)
   (:reference lambda-expression-p)
   (:group-id nil)
   (:name "lambda-expression-p")
   (:x 531)
   (:y 319)
   (:w 195)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FORM")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 29))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference py->lisp)
   (:group-id nil)
   (:name "py->lisp")
   (:x 646)
   (:y 251)
   (:w 104)
   (:h 34)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RESULT")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 30)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 1 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 9 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 30 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 9 :in 1)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 9 :in 2)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 9 :in 3))
   (:attributes (:color nil :style nil :modif (0 13/75))))
  (:connection (:from (:box 9 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 14 :in 1)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 13 :in 0)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 29 :in 0)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 15 :in 0)))
  (:connection (:from (:box 14 :out 0)) (:to (:box 17 :in 0)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 14 :in 0)))
  (:connection
   (:from (:box 16 :out 0))
   (:to (:box 13 :in 1))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection
   (:from (:box 16 :out 1))
   (:to (:box 13 :in 2))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif (0 101/950))))
  (:connection (:from (:box 19 :out 0)) (:to (:box 20 :in 0)))
  (:connection (:from (:box 20 :out 0)) (:to (:box 21 :in 0)))
  (:connection (:from (:box 22 :out 0)) (:to (:box 25 :in 0)))
  (:connection
   (:from (:box 22 :out 0))
   (:to (:box 26 :in 0))
   (:attributes (:color nil :style nil :modif (0 22/125))))
  (:connection (:from (:box 22 :out 1)) (:to (:box 24 :in 0)))
  (:connection
   (:from (:box 22 :out 1))
   (:to (:box 26 :in 1))
   (:attributes (:color nil :style nil :modif (0 -4/25))))
  (:connection (:from (:box 22 :out 2)) (:to (:box 23 :in 0)))
  (:connection (:from (:box 23 :out 0)) (:to (:box 20 :in 3)))
  (:connection
   (:from (:box 24 :out 0))
   (:to (:box 20 :in 2))
   (:attributes (:color nil :style nil :modif (0 -1/6))))
  (:connection (:from (:box 25 :out 0)) (:to (:box 20 :in 1)))
  (:connection (:from (:box 27 :out 0)) (:to (:box 26 :in 2)))
  (:connection (:from (:box 28 :out 0)) (:to (:box 26 :in 3)))))