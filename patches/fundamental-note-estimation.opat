
(:patch
 (:name "fundamental-note-estimation")
 (:doc "")
 (:info
  (:created "2021/04/09 11:23:33")
  (:modified "2021/04/14 22:04:40")
  (:by "om-sharp")
  (:version 1.02))
 (:window (:size (1942 1102)) (:position (-9 -9)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :function)
   (:reference sound-window)
   (:group-id nil)
   (:name "sound-window")
   (:x 570)
   (:y 284)
   (:w 161)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SOUND-BYTES-WINDOW")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "WINDOW")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "HOP-SIZE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 619)
   (:y 227)
   (:w 61)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 8192)
   (:id 1))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 720)
   (:y 225)
   (:w 60)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 2048)
   (:id 2))
  (:box
   (:type :object)
   (:reference sound)
   (:group-id nil)
   (:name nil)
   (:x 128)
   (:y 6)
   (:w 323)
   (:h 91)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname t)
   (:show-markers t)
   (:lock :locked)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value :choose-file)
     (:reactive nil)))
   (:outputs (:output (:name "SELF") (:reactive nil)))
   (:window (:size (1920 1026)) (:position (-9 -9)))
   (:edition-params)
   (:value
    (:object
     (:class sound)
     (:slots
      ((:onset 0)
       (:duration 7223.469)
       (:n-samples 318555)
       (:n-channels 1)
       (:sample-rate 44100)
       (:smpl-type :float)
       (:sample-size 24)))
     (:add-slots
      ((:markers (:list 229 2886))
       (:gain 1.0)
       (:access-from-file nil)
       (:file-pathname
        (:pathname
         (:directory
          (:relative
           :back
           :back
           :back
           :back
           "Ircam Instrumentos"
           "16 Contrabass"
           "ordinario"))
         (:device nil)
         (:host "C")
         (:name "Cb-ord-ff-4c- A1")
         (:type "aif")))))))
   (:id 3))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference sound->bytes)
   (:group-id nil)
   (:name "sound->bytes")
   (:x 687)
   (:y 135)
   (:w 163)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "start")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (1183 475)) (:position (96 96)))
     (:text
      (:list
       "(lambda (x) (if (equal (markers x) nil) 0 (1+ (sec->samples (ms->sec (first (markers x))) (sample-rate x)))))"))))
   (:group-id nil)
   (:name "start")
   (:x 374)
   (:y 133)
   (:w 146)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "X")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "finish")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size nil) (:position nil))
     (:text
      (:list
       "(lambda (x) (if (< (length (markers x)) 2)"
       "                (1- (n-samples x))"
       "                (1+ (sec->samples (ms->sec (second (markers x))) (sample-rate x)))"
       "              ))"))))
   (:group-id nil)
   (:name "finish")
   (:x 535)
   (:y 136)
   (:w 146)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "X")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "my-function")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (923 475)) (:position (32 32)))
     (:text
      (:list
       "(lambda (sound-bytes start finish) "
       "  (let* ((action1 "
       "                (first-n sound-bytes finish))"
       "               (action2 (- finish start)))"
       "          (last-n action1 action2)))"))))
   (:group-id nil)
   (:name "my-function")
   (:x 409)
   (:y 234)
   (:w 146)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "SOUND-BYTES")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "START")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "FINISH")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "my-patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (1942 1102)) (:position (-9 -9)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 596)
       (:y 911)
       (:w 48)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input 1") (:doc "")))
       (:group-id nil)
       (:name "input 1")
       (:x 119)
       (:y 23)
       (:w 77)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 2) (:name "HOP-SIZE") (:doc "")))
       (:group-id nil)
       (:name "HOP-SIZE")
       (:x 815)
       (:y 447)
       (:w 110)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :abstraction)
       (:reference
        (:patch
         (:name "v")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1920 1026)) (:position (-9 -9)))
         (:grid nil)
         (:lock nil)
         (:boxes
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 1) (:name "fft") (:doc "")))
           (:group-id nil)
           (:name "fft")
           (:x 35)
           (:y 95)
           (:w 84)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 0))
          (:box
           (:type :io)
           (:reference
            (:out (:type omout) (:name "out") (:index 1) (:doc "")))
           (:group-id nil)
           (:name "out")
           (:x 838)
           (:y 475)
           (:w 51)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "out-value")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 1))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 2) (:name "mail-box") (:doc "")))
           (:group-id nil)
           (:name "mail-box")
           (:x 359)
           (:y 17)
           (:w 101)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 2))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 3) (:name "NAMES") (:doc "")))
           (:group-id nil)
           (:name "NAMES")
           (:x 98)
           (:y 364)
           (:w 89)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 3))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 4) (:name "NUMERO") (:doc "")))
           (:group-id nil)
           (:name "NUMERO")
           (:x 188)
           (:y 342)
           (:w 105)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 4))
          (:box
           (:type :io)
           (:reference
            (:in (:type omin) (:index 5) (:name "HOP-SIZE") (:doc "")))
           (:group-id nil)
           (:name "HOP-SIZE")
           (:x 258)
           (:y 400)
           (:w 110)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
             (:t-or-nil t)))
           (:border 0)
           (:roundness 0)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs)
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 5))
          (:box
           (:type :abstraction)
           (:reference
            (:textfun
             (:name "my-function")
             (:doc "")
             (:info
              (:created nil)
              (:modified nil)
              (:by *app-name*)
              (:version 0))
             (:window (:size (1920 976)) (:position (9 90)))
             (:text
              (:list
               "(lambda (fft-chunks mail-box nomes chunks hop-size)"
               ""
               "(loop "
               "      :for ckn-fft-chunks :in fft-chunks "
               "      :for create-mailbox :in mail-box"
               "      :for names-process :in nomes"
               "      :for chunks-number :in chunks"
               "      :do "
               "                (mp:process-run-function names-process"
               "                         () "
               "                         (lambda (x w z) (mp:mailbox-send w "
               "                                                          (let* ((amp (fft->amplitude (half-fun (sapa-fft! x))))"
               "                                                                 (length-amp (length amp))                                                                 "
               "                                                                 (bin-to-freq (bin->freq (arithm-ser 1 length-amp 1) 44110 (* 2 length-amp)))"
               "                                                                 (para-o-filtro (list amp bin-to-freq)))"
               "                                                                 (make-instance 'ckn-fft "
               "                                                                         :amplitudes amp"
               "                                                                         :fft-chunks z "
               "                                                                         :frequencias (second para-o-filtro)"
               "                                                                         :tempo (sec->ms (samples->sec (om* hop-size z) 44100))))))"
               "                           ckn-fft-chunks create-mailbox chunks-number)))"
               ""
               ""
               ""
               ""
               ""
               "  "
               ""
               ""
               ""
               ""))))
           (:group-id nil)
           (:name "my-function")
           (:x 30)
           (:y 533)
           (:w 195)
           (:h 102)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock nil)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "FFT-CHUNKS")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "MAIL-BOX")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "NOMES")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "CHUNKS")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "HOP-SIZE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 6))
          (:box
           (:type :special)
           (:reference init-do)
           (:group-id nil)
           (:name "init-do")
           (:x 84)
           (:y 747)
           (:w 80)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "action")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 7))
          (:box
           (:type :function)
           (:reference mapcar)
           (:group-id nil)
           (:name "mapcar")
           (:x 615)
           (:y 140)
           (:w 105)
           (:h 39)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FUNCTION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "LIST")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 8))
          (:box
           (:type :function)
           (:reference (:symbol "MAILBOX-EMPTY-P" "MP"))
           (:group-id nil)
           (:name "mailbox-empty-p")
           (:x 545)
           (:y 40)
           (:w 193)
           (:h 39)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda :lambda)
           (:inputs
            (:input
             (:type :standard)
             (:name "MAILBOX")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 9))
          (:box
           (:type :function)
           (:reference mapcar)
           (:group-id nil)
           (:name "mapcar")
           (:x 866)
           (:y 321)
           (:w 105)
           (:h 39)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "FUNCTION")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "LIST")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 10))
          (:box
           (:type :function)
           (:reference (:symbol "MAILBOX-PEEK" "MP"))
           (:group-id nil)
           (:name "mailbox-peek")
           (:x 745)
           (:y 245)
           (:w 160)
           (:h 39)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda :lambda)
           (:inputs
            (:input
             (:type :standard)
             (:name "MAILBOX")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 11))
          (:box
           (:type :special)
           (:reference iterate)
           (:group-id nil)
           (:name "iterate")
           (:x 476)
           (:y 585)
           (:w 81)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "action")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :optional)
             (:name "action")
             (:value nil)
             (:reactive nil)))
           (:outputs)
           (:id 12))
          (:box
           (:type :function)
           (:reference remove)
           (:group-id nil)
           (:name "remove")
           (:x 450)
           (:y 230)
           (:w 106)
           (:h 39)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "ITEM")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "SEQUENCE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 13))
          (:box
           (:type :function)
           (:reference length)
           (:group-id nil)
           (:name "length")
           (:x 551)
           (:y 288)
           (:w 94)
           (:h 39)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:icon :left)
           (:lock nil)
           (:lambda nil)
           (:inputs
            (:input
             (:type :standard)
             (:name "SEQUENCE")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 14))
          (:box
           (:type :abstraction)
           (:reference
            (:textfun
             (:name "my-function")
             (:doc "")
             (:info
              (:created nil)
              (:modified nil)
              (:by *app-name*)
              (:version 0))
             (:window (:size (961 475)) (:position (64 64)))
             (:text
              (:list
               "(lambda (choose tempo)"
               ""
               "(let ((then (get-universal-time))"
               "       (now  (progn (sleep tempo) (get-universal-time))))"
               "   (if (>= (- now then) tempo) (print choose) nil)))"))))
           (:group-id nil)
           (:name "my-function")
           (:x 594)
           (:y 438)
           (:w 134)
           (:h 60)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock nil)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "CHOOSE")
             (:value nil)
             (:reactive nil))
            (:input
             (:type :standard)
             (:name "TEMPO")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 15))
          (:box
           (:type :value)
           (:reference single-float)
           (:group-id nil)
           (:name "value box")
           (:x 705)
           (:y 363)
           (:w 60)
           (:h 39)
           (:color
            (:color-or-nil
             (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align nil)
           (:lock nil)
           (:inputs)
           (:outputs (:output (:name "value") (:reactive nil)))
           (:value 0.75)
           (:id 16))
          (:box
           (:type :abstraction)
           (:reference
            (:textfun
             (:name "my-function")
             (:doc "")
             (:info
              (:created nil)
              (:modified nil)
              (:by *app-name*)
              (:version 0))
             (:window (:size (930 475)) (:position (622 438)))
             (:text
              (:list
               ";;; Edit a valid LAMBDA EXPRESSION"
               ";;; e.g. (lambda (arg1 arg2 ...) ( ... ))"
               "(lambda (x) (format nil \"Faltam ~a janelas para processamento. Aguarde!\" x))"))))
           (:group-id nil)
           (:name "my-function")
           (:x 523)
           (:y 343)
           (:w 134)
           (:h 60)
           (:color nil)
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:display :hidden)
           (:lock nil)
           (:lambda nil)
           (:pre-delay 0)
           (:inputs
            (:input
             (:type :standard)
             (:name "X")
             (:value nil)
             (:reactive nil)))
           (:outputs (:output (:name "out") (:reactive nil)))
           (:id 17))
          (:box
           (:type :special)
           (:reference loop-while)
           (:group-id nil)
           (:name "loop-while")
           (:x 381)
           (:y 366)
           (:w 114)
           (:h 42)
           (:color
            (:color-or-nil
             (:color (:color 0.82 0.85 0.7 1.0))
             (:t-or-nil t)))
           (:border nil)
           (:roundness nil)
           (:text-font nil)
           (:align :center)
           (:icon :top)
           (:inputs
            (:input
             (:type :standard)
             (:name "condition")
             (:value t)
             (:reactive nil)))
           (:outputs (:output (:name "i") (:reactive nil)))
           (:id 18)))
         (:connections
          (:connection (:from (:box 0 :out 0)) (:to (:box 6 :in 0)))
          (:connection (:from (:box 2 :out 0)) (:to (:box 8 :in 1)))
          (:connection (:from (:box 2 :out 0)) (:to (:box 10 :in 1)))
          (:connection (:from (:box 2 :out 0)) (:to (:box 6 :in 1)))
          (:connection (:from (:box 3 :out 0)) (:to (:box 6 :in 2)))
          (:connection (:from (:box 4 :out 0)) (:to (:box 6 :in 3)))
          (:connection (:from (:box 5 :out 0)) (:to (:box 6 :in 4)))
          (:connection (:from (:box 6 :out 0)) (:to (:box 7 :in 0)))
          (:connection (:from (:box 8 :out 0)) (:to (:box 13 :in 1)))
          (:connection (:from (:box 9 :out 0)) (:to (:box 8 :in 0)))
          (:connection (:from (:box 10 :out 0)) (:to (:box 1 :in 0)))
          (:connection (:from (:box 11 :out 0)) (:to (:box 10 :in 0)))
          (:connection (:from (:box 13 :out 0)) (:to (:box 14 :in 0)))
          (:connection (:from (:box 13 :out 0)) (:to (:box 18 :in 0)))
          (:connection (:from (:box 14 :out 0)) (:to (:box 17 :in 0)))
          (:connection (:from (:box 15 :out 0)) (:to (:box 12 :in 1)))
          (:connection (:from (:box 16 :out 0)) (:to (:box 15 :in 1)))
          (:connection (:from (:box 17 :out 0)) (:to (:box 15 :in 0)))
          (:connection
           (:from (:box 18 :out 0))
           (:to (:box 12 :in 0))))))
       (:group-id nil)
       (:name "v")
       (:x 1087)
       (:y 206)
       (:w 184)
       (:h 114)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "fft")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "mail-box")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NAMES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NUMERO")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HOP-SIZE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "my-function")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1240 475)) (:position (64 64)))
         (:text
          (:list
           "(lambda (fft-chunks)"
           ""
           ""
           "(let* ((verbose (print (format nil \"São ~a janelas\" (length fft-chunks)))))"
           "(loop :for chunks-number :in (arithm-ser 1 (length fft-chunks) 1)"
           "      :collect (list->string (list 'fft- chunks-number)))))"))))
       (:group-id nil)
       (:name "my-function")
       (:x 720)
       (:y 330)
       (:w 146)
       (:h 60)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock :eval-once)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "FFT-CHUNKS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "my-function")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1048 475)) (:position (256 256)))
         (:text
          (:list
           "(lambda (names-of-all-process)"
           ""
           "(loop :for name-process :in names-of-all-process"
           "      :collect (mp:make-mailbox :lock-name name-process)))"))))
       (:group-id nil)
       (:name "my-function")
       (:x 557)
       (:y 425)
       (:w 146)
       (:h 60)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "NAMES-OF-ALL-PROCESS")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 579)
       (:y 795)
       (:w 75)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value t)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 6))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 511)
       (:y 872)
       (:w 74)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 7))
      (:box
       (:type :function)
       (:reference loop-in-parts)
       (:group-id nil)
       (:name "loop-in-parts")
       (:x 633)
       (:y 225)
       (:w 141)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SOUND-BYTES-WINDOW")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "WINDOW")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HOP-SIZE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 675)
       (:y 164)
       (:w 49)
       (:h 39)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 128)
       (:id 9))
      (:box
       (:type :function)
       (:reference flat)
       (:group-id nil)
       (:name "flat")
       (:x 594)
       (:y 846)
       (:w 63)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:type :function)
       (:reference length)
       (:group-id nil)
       (:name "length")
       (:x 41)
       (:y 168)
       (:w 89)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SEQUENCE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 11))
      (:box
       (:type :function)
       (:reference loop-in-parts)
       (:group-id nil)
       (:name "loop-in-parts")
       (:x 31)
       (:y 613)
       (:w 141)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SOUND-BYTES-WINDOW")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "WINDOW")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HOP-SIZE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 12))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 132)
       (:y 542)
       (:w 49)
       (:h 39)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 128)
       (:id 13))
      (:box
       (:type :function)
       (:reference arithm-ser)
       (:group-id nil)
       (:name "arithm-ser")
       (:x 29)
       (:y 424)
       (:w 122)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "BEGIN")
         (:value 1)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "END")
         (:value 10)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "STEP")
         (:value 1)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 14))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 20)
       (:y 339)
       (:w 32)
       (:h 39)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 15))
      (:box
       (:type :special)
       (:reference if)
       (:group-id nil)
       (:name "if")
       (:x 479)
       (:y 297)
       (:w 146)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "THEN")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 16))
      (:box
       (:type :function)
       (:reference om>)
       (:group-id nil)
       (:name "om>")
       (:x 344)
       (:y 228)
       (:w 75)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "NUM1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NUM2")
         (:value 1)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 17))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 374)
       (:y 178)
       (:w 49)
       (:h 39)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 129)
       (:id 18))
      (:box
       (:type :function)
       (:reference list)
       (:group-id nil)
       (:name "list")
       (:x 559)
       (:y 224)
       (:w 61)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "args")
         (:value 1)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 19))
      (:box
       (:type :special)
       (:reference if)
       (:group-id nil)
       (:name "if")
       (:x 293)
       (:y 544)
       (:w 146)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "THEN")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 20))
      (:box
       (:type :function)
       (:reference list)
       (:group-id nil)
       (:name "list")
       (:x 217)
       (:y 463)
       (:w 61)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "args")
         (:value 1)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 21))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "loop-list")
       (:x 318)
       (:y 656)
       (:w 86)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 22))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "loop-list")
       (:x 504)
       (:y 363)
       (:w 86)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 23))
      (:box
       (:type :abstraction)
       (:reference
        (:textfun
         (:name "my-function")
         (:doc "")
         (:info
          (:created nil)
          (:modified nil)
          (:by *app-name*)
          (:version 0))
         (:window (:size (1654 719)) (:position (224 224)))
         (:text
          (:list
           ""
           "(lambda (fft-chunks mail-box nomes chunks hop-size)"
           ""
           "(let* ("
           "      (action1 "
           "       (loop "
           "        :for ckn-fft-chunks :in fft-chunks "
           "        :for create-mailbox :in mail-box"
           "        :for names-process :in nomes"
           "        :for chunks-number :in chunks"
           "        :do "
           "                (mp:process-run-function names-process"
           "                         () "
           "                         (lambda (x w z) (mp:mailbox-send w "
           "                                                          (let* ((amp (fft->amplitude (half-fun (sapa-fft! x))))"
           "                                                                 (length-amp (length amp))                                                                 "
           "                                                                 (bin-to-freq (bin->freq (arithm-ser 1 length-amp 1) 44110 (* 2 length-amp)))"
           "                                                                 (para-o-filtro (list amp bin-to-freq)))"
           "                                                                 (make-instance 'ckn-fft "
           "                                                                         :amplitudes amp"
           "                                                                         :fft-chunks z "
           "                                                                         :frequencias (second para-o-filtro)"
           "                                                                         :tempo (sec->ms (samples->sec (om* hop-size z) 44100))))))"
           "                         ckn-fft-chunks create-mailbox chunks-number)))"
           ""
           "(action2 (loop with it-50 = nil :while (setf it-50 (remove nil (mapcar (lambda (x) (mp:mailbox-empty-p x)) mail-box)))"
           "   :do (let*"
           "       ((box-remove (remove nil (mapcar (lambda (x) (mp:mailbox-empty-p x)) mail-box))))"
           "         it-50"
           "       (let ((then (get-universal-time))"
           "       (now  (progn (sleep 0.75) (get-universal-time))))"
           "   (if (>= (- now then) 0.75) (print (format nil \"Faltam ~a janelas para processamento. Aguarde!\" (length box-remove))) nil))))))"
           ""
           "(mapcar (lambda (x) (mp:mailbox-peek x)) mail-box)))"))))
       (:group-id nil)
       (:name "my-function")
       (:x 1340)
       (:y 456)
       (:w 134)
       (:h 60)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :hidden)
       (:lock nil)
       (:lambda nil)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "FFT-CHUNKS")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "MAIL-BOX")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NOMES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CHUNKS")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HOP-SIZE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 24))
      (:box
       (:type :function)
       (:reference fft-multiple-thread)
       (:group-id nil)
       (:name "fft-multiple-thread")
       (:x 539)
       (:y 613)
       (:w 182)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FFT-CHUNKS")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "MAIL-BOX")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NOMES")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CHUNKS")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HOP-SIZE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 25)))
     (:connections
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 11 :in 0))
       (:attributes (:color nil :style nil :modif (0 -69/226))))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 19 :in 0))
       (:attributes (:color nil :style nil :modif (0 21/169))))
      (:connection (:from (:box 1 :out 0)) (:to (:box 8 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 25 :in 4)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 25 :in 2)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 25 :in 1))
       (:attributes (:color nil :style nil :modif (0 -0.392029))))
      (:connection (:from (:box 6 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 6 :out 1)) (:to (:box 10 :in 0)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 16 :in 1)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 8 :in 1)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 8 :in 2)))
      (:connection (:from (:box 10 :out 0)) (:to (:box 0 :in 0)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 14 :in 1)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 17 :in 0)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 20 :in 1)))
      (:connection (:from (:box 13 :out 0)) (:to (:box 12 :in 2)))
      (:connection (:from (:box 13 :out 0)) (:to (:box 12 :in 1)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 12 :in 0)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 21 :in 0)))
      (:connection (:from (:box 15 :out 0)) (:to (:box 14 :in 0)))
      (:connection (:from (:box 16 :out 0)) (:to (:box 23 :in 0)))
      (:connection (:from (:box 17 :out 0)) (:to (:box 16 :in 0)))
      (:connection (:from (:box 17 :out 0)) (:to (:box 20 :in 0)))
      (:connection (:from (:box 18 :out 0)) (:to (:box 17 :in 1)))
      (:connection (:from (:box 19 :out 0)) (:to (:box 16 :in 2)))
      (:connection (:from (:box 20 :out 0)) (:to (:box 22 :in 0)))
      (:connection (:from (:box 21 :out 0)) (:to (:box 20 :in 2)))
      (:connection (:from (:box 22 :out 0)) (:to (:box 25 :in 3)))
      (:connection (:from (:box 23 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 23 :out 0)) (:to (:box 25 :in 0)))
      (:connection (:from (:box 25 :out 0)) (:to (:box 6 :in 0))))))
   (:group-id nil)
   (:name "my-patch")
   (:x 521)
   (:y 353)
   (:w 114)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock :locked)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input 1")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "HOP-SIZE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:box
   (:library "OM-JI")
   (:type :function)
   (:reference (:symbol "CHOOSE" "OM-JI"))
   (:group-id nil)
   (:name "choose")
   (:x 577)
   (:y 452)
   (:w 98)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "NOTELIST")
     (:value (:list 1 2 3 4 5 6 7 8 9 10))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CHORD-N")
     (:value (:list 1 7 9))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 612)
   (:y 417)
   (:w 71)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 10))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 1381)
   (:y 145)
   (:w 76)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 0 10))
   (:id 11))
  (:box
   (:type :function)
   (:reference get-slot-val)
   (:group-id nil)
   (:name "get-slot-val")
   (:x 665)
   (:y 497)
   (:w 128)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "SLOT-NAME")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "value box")
   (:x 701)
   (:y 442)
   (:w 115)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value amplitudes)
   (:id 13))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "my-patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (444 430)) (:position (32 32)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 273)
       (:y 270)
       (:w 48)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input 1") (:doc "")))
       (:group-id nil)
       (:name "input 1")
       (:x 191)
       (:y 41)
       (:w 77)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0S0 1.0S0 1.0S0 0.0S0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :function)
       (:reference sort-list)
       (:group-id nil)
       (:name "sort-list")
       (:x 59)
       (:y 100)
       (:w 98)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :function)
       (:reference last)
       (:group-id nil)
       (:name "last")
       (:x 50)
       (:y 223)
       (:w 67)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :function)
       (:reference first)
       (:group-id nil)
       (:name "first")
       (:x 73)
       (:y 291)
       (:w 69)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:type :function)
       (:reference position)
       (:group-id nil)
       (:name "position")
       (:x 215)
       (:y 148)
       (:w 103)
       (:h 39)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ITEM")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "SEQUENCE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5)))
     (:connections
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 2 :in 0))
       (:attributes
        (:color (:color 0.2 0.4 0.5 1.0) :style :curved :modif nil)))
      (:connection (:from (:box 1 :out 0)) (:to (:box 5 :in 1)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 3 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 0)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 0 :in 0))))))
   (:group-id nil)
   (:name "my-patch")
   (:x 603)
   (:y 557)
   (:w 114)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input 1")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "my-function")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (1126 475)) (:position (325 323)))
     (:text
      (:list
       ""
       "(lambda (x) "
       "      (if (equal 3 (length x))"
       "          (let* ("
       "                 (a (first x))"
       "                 (b (second x))"
       "                 (c (third x)))"
       "            (* 1/2 (/ (- a c) (+ (- (* 2 a) (* 2 b)) c)))) nil))"
       ""))))
   (:group-id nil)
   (:name "my-function")
   (:x 1087)
   (:y 334)
   (:w 134)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "X")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 15))
  (:box
   (:type :function)
   (:reference om+)
   (:group-id nil)
   (:name "om+")
   (:x 1014)
   (:y 541)
   (:w 75)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "ARG1")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ARG2")
     (:value 0)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 16))
  (:box
   (:library "OM-CKN")
   (:type :function)
   (:reference bin->freq)
   (:group-id nil)
   (:name "bin->freq")
   (:x 1021)
   (:y 661)
   (:w 226)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FFT-BIN")
     (:value (:list 41 82 122 163 204))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "SAMPLE-RATE")
     (:value 44100)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "FFT-SIZE")
     (:value 4096)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 17))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 1022)
   (:y 587)
   (:w 61)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "args")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 18))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 1099)
   (:y 626)
   (:w 70)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :left)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 44100)
   (:id 19))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 1176)
   (:y 626)
   (:w 60)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :left)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 8192)
   (:id 20))
  (:box
   (:type :function)
   (:reference mapcar)
   (:group-id nil)
   (:name "mapcar")
   (:x 1100)
   (:y 257)
   (:w 100)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 21))
  (:box
   (:type :function)
   (:reference nth)
   (:group-id nil)
   (:name "nth")
   (:x 1038)
   (:y 172)
   (:w 64)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda :lambda)
   (:inputs
    (:input
     (:type :standard)
     (:name "ORIG-N")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ORIG-LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 22))
  (:box
   (:type :function)
   (:reference 1-)
   (:group-id nil)
   (:name "1-")
   (:x 586)
   (:y 643)
   (:w 54)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "X")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 23))
  (:box
   (:type :function)
   (:reference 1+)
   (:group-id nil)
   (:name "1+")
   (:x 684)
   (:y 648)
   (:w 60)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "X")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 24))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 595)
   (:y 712)
   (:w 140)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "args")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value 2)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "args")
     (:value 3)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 25))
  (:box
   (:type :function)
   (:reference f->mc)
   (:group-id nil)
   (:name "f->mc")
   (:x 1092)
   (:y 755)
   (:w 169)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FREQ")
     (:value 440)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "approx")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 26))
  (:box
   (:type :object)
   (:reference note)
   (:group-id nil)
   (:name nil)
   (:x 1053)
   (:y 808)
   (:w 274)
   (:h 119)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "MIDIC")
     (:value 6000)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VEL")
     (:value 100)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DUR")
     (:value 1000)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CHAN")
     (:value 1)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "MIDIC") (:reactive nil))
    (:output (:name "VEL") (:reactive nil))
    (:output (:name "DUR") (:reactive nil))
    (:output (:name "CHAN") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class note)
     (:slots
      ((:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:midic 4490)
       (:vel 100)
       (:dur 1000)
       (:chan 1)
       (:port nil)
       (:offset 0)))))
   (:id 27))
  (:box
   (:type :function)
   (:reference first)
   (:group-id nil)
   (:name "first")
   (:x 1100)
   (:y 716)
   (:w 69)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 28))
  (:box
   (:type :function)
   (:reference mc->n)
   (:group-id nil)
   (:name "mc->n")
   (:x 846)
   (:y 839)
   (:w 89)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "MIDIC")
     (:value (:list 6000))
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "middle-c")
     (:value 3)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 29))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 887)
   (:y 792)
   (:w 32)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 4)
   (:id 30))
  (:box
   (:type :abstraction)
   (:reference
    (:textfun
     (:name "ckn-fft")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (1920 1026)) (:position (-9 -9)))
     (:text
      (:list
       "(lambda (sound-self fft-size hop-size)"
       ""
       "  (let* ("
       "        (start (print (if (equal (markers sound-self) nil)"
       "                   0 "
       "                 (1+ (sec->samples (ms->sec (first (markers sound-self))) (sample-rate sound-self))))))"
       "        (finish (print (if (< (length (markers sound-self)) 2)"
       "                (1- (n-samples sound-self))"
       "                (1+ (sec->samples (ms->sec (second (markers sound-self))) (sample-rate sound-self))))))"
       "        (sound (sound->bytes sound-self))"
       "        (sound-selection (let* ((action1 (first-n sound finish))"
       "                                (action2 (- finish start)))"
       "                           (last-n action1 action2)))"
       "        (sound-windows (sound-window sound-selection fft-size hop-size))"
       "        (sound-windows-parts (loop-in-parts sound-windows 128 128))"
       "        (sound-windows-length (length sound-windows))"
       "        (fft-chunk-to-ms (arithm-ser 1 sound-windows-length 1))"
       "        (fft-chunk-to-ms-parts (loop-in-parts fft-chunk-to-ms 128 128))"
       "        (boolean-window-size (om> sound-windows-length 129))) ; REVER POR CAUSA DA JORDANINHA"
       ""
       "(if boolean-window-size"
       "    (loop :for loop-sound-windows-parts :in sound-windows-parts "
       "          :for loop-fft-chunk-to-ms-parts :in fft-chunk-to-ms-parts"
       "          :collect (let* ("
       "                         (action1 (do-fft-chunks loop-sound-windows-parts))"
       "                         (action2 (ckn-make-mail-box action1)))"
       "                     (fft-multiple-thread loop-sound-windows-parts action2 action1 loop-fft-chunk-to-ms-parts hop-size)))"
       "  "
       "  (let* ("
       "                         "
       "                         (action1 sound-windows)"
       "                         (action2 fft-chunk-to-ms)                         "
       "                         (action3 (do-fft-chunks sound-windows))"
       "                         (action4 (ckn-make-mail-box action3)))"
       "                     (fft-multiple-thread action1 action4 action3 action2 hop-size)))))"
       "  "))))
   (:group-id nil)
   (:name "ckn-fft")
   (:x 123)
   (:y 318)
   (:w 134)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "SOUND-SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "FFT-SIZE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "HOP-SIZE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 31))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 160)
   (:y 268)
   (:w 61)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :left)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 8192)
   (:id 32))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 222)
   (:y 267)
   (:w 60)
   (:h 39)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :left)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 2048)
   (:id 33))
  (:box
   (:type :function)
   (:reference first)
   (:group-id nil)
   (:name "first")
   (:x 753)
   (:y 330)
   (:w 69)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 34))
  (:box
   (:type :function)
   (:reference sapa-fft!)
   (:group-id nil)
   (:name "sapa-fft!")
   (:x 739)
   (:y 373)
   (:w 104)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "COMPLEX-VECTOR")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 35))
  (:box
   (:library "OM-CKN")
   (:type :object)
   (:reference ckn-fft)
   (:group-id nil)
   (:name nil)
   (:x 146)
   (:y 537)
   (:w 306)
   (:h 111)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :text)
   (:showname nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "AMPLITUDES")
     (:value (:list 0.3 0.3 0.3))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "FREQUENCIAS")
     (:value (:list 220 440 880))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "FFT-CHUNKS")
     (:value (:list "fft-1" "fft-2" "fft-3"))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "TEMPO")
     (:value (:list 1))
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "AMPLITUDES") (:reactive nil))
    (:output (:name "FREQUENCIAS") (:reactive nil))
    (:output (:name "FFT-CHUNKS") (:reactive nil))
    (:output (:name "TEMPO") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class ckn-fft)
     (:slots
      ((:amplitudes (:list 0.3 0.3 0.3))
       (:frequencias (:list 220 440 880))
       (:fft-chunks (:list "fft-1" "fft-2" "fft-3"))
       (:tempo (:list 1))))))
   (:id 36))
  (:box
   (:type :function)
   (:reference first)
   (:group-id nil)
   (:name "first")
   (:x 145)
   (:y 450)
   (:w 69)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 37)))
 (:connections
  (:connection
   (:from (:box 0 :out 0))
   (:to (:box 8 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 0 :out 0)) (:to (:box 34 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 0 :in 1)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 0 :in 2)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 8 :in 1)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 31 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 7 :in 1)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 7 :in 2)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 0 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 9 :in 0)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 9 :in 1)))
  (:connection
   (:from (:box 12 :out 0))
   (:to (:box 14 :in 0))
   (:attributes
    (:color (:color 0.2 0.4 0.5 1.0) :style nil :modif nil)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 22 :in 1)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 12 :in 1)))
  (:connection
   (:from (:box 14 :out 0))
   (:to (:box 16 :in 0))
   (:attributes (:color nil :style nil :modif (87/299 0))))
  (:connection (:from (:box 14 :out 0)) (:to (:box 25 :in 1)))
  (:connection (:from (:box 14 :out 0)) (:to (:box 23 :in 0)))
  (:connection (:from (:box 14 :out 0)) (:to (:box 24 :in 0)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 16 :in 1)))
  (:connection (:from (:box 16 :out 0)) (:to (:box 18 :in 0)))
  (:connection (:from (:box 17 :out 0)) (:to (:box 28 :in 0)))
  (:connection (:from (:box 18 :out 0)) (:to (:box 17 :in 0)))
  (:connection (:from (:box 19 :out 0)) (:to (:box 17 :in 1)))
  (:connection (:from (:box 20 :out 0)) (:to (:box 17 :in 2)))
  (:connection (:from (:box 21 :out 0)) (:to (:box 15 :in 0)))
  (:connection (:from (:box 22 :out 0)) (:to (:box 21 :in 0)))
  (:connection (:from (:box 23 :out 0)) (:to (:box 25 :in 0)))
  (:connection (:from (:box 24 :out 0)) (:to (:box 25 :in 2)))
  (:connection (:from (:box 25 :out 0)) (:to (:box 21 :in 1)))
  (:connection (:from (:box 26 :out 0)) (:to (:box 27 :in 1)))
  (:connection (:from (:box 27 :out 1)) (:to (:box 29 :in 0)))
  (:connection (:from (:box 28 :out 0)) (:to (:box 26 :in 0)))
  (:connection (:from (:box 30 :out 0)) (:to (:box 29 :in 1)))
  (:connection (:from (:box 31 :out 0)) (:to (:box 37 :in 0)))
  (:connection (:from (:box 32 :out 0)) (:to (:box 31 :in 1)))
  (:connection (:from (:box 33 :out 0)) (:to (:box 31 :in 2)))
  (:connection (:from (:box 34 :out 0)) (:to (:box 35 :in 0)))))